#include <bits/stdc++.h>

#define ld long double
#define ll long long
using namespace std;
#define MAX 1000000
int n;
bool checkArr(bool a[]) {
    bool done = true;
    for (int i = 0; i < n; i++) done &= a[i];
    return done;
}

ll previous;
ll last;
ll checkDist(ll curr) {
    ld res = min(min(abs(curr - previous), abs(curr - last)), min(abs(curr - (previous + MAX)), abs(curr - (last + MAX))));
    return res;
}

int main() {
    
    cin >> n;
    
    ll a[n];
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    
    sort(a, a + n);
    int k;
    cin >> k;
    
    ll l = 0, r = 500000;
    ld ans = r;
   while (l <= r) {
        // binary search on the answer
        ll dist = ((ll)l + r) / 2;
        previous = a[0] - dist;
        last = previous;
        int left = k - 1;
        bool done[n];
        memset(done, false, sizeof(done));
        done[0] = true;
        
        // place all hydrants before the houses
        for (int i = n - 1; i >= 1; i--) {
            if (checkDist(a[i]) <= dist) {
                done[i] = true;
            } else {
                if (left == 0) break;
                left--;
                previous = a[i] - dist;
                done[i] = true;
            }
        }
        
        if (checkArr(done)) {
            ans = dist;
            r = dist - 1;
            continue;
        }
        
        memset(done, false, sizeof(done));
        done[0] = true;
        last = a[0] + dist;
        previous = last;
        left = k - 1;
        
        // place all hydrants after the houses
        for (int i = 1; i < n; i++) {
            
            if (checkDist(a[i]) <= dist) {
                done[i] = true;
            } else {
                if (left == 0) break;
                left--;
                previous = a[i] + dist;
                done[i] = true;
            }
        }
        if (checkArr(done)) {
            ans = dist;
            r = dist - 1;
            continue;
        } else {
            l = dist + 1;
        }
        
    }
    cout << ans;
}
